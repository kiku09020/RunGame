//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Other/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Reset"",
            ""id"": ""4cced04f-eefa-4ede-9c88-793496f22106"",
            ""actions"": [
                {
                    ""name"": ""Reset"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d2b47ca3-71fc-461f-be40-a9de67de539d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25e48822-7a72-4389-9955-ac35709d19e5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ee51e8a-fa19-42a4-8925-aceb0561595a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Reset
        m_Reset = asset.FindActionMap("Reset", throwIfNotFound: true);
        m_Reset_Reset = m_Reset.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Reset
    private readonly InputActionMap m_Reset;
    private IResetActions m_ResetActionsCallbackInterface;
    private readonly InputAction m_Reset_Reset;
    public struct ResetActions
    {
        private @GameInput m_Wrapper;
        public ResetActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reset => m_Wrapper.m_Reset_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Reset; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ResetActions set) { return set.Get(); }
        public void SetCallbacks(IResetActions instance)
        {
            if (m_Wrapper.m_ResetActionsCallbackInterface != null)
            {
                @Reset.started -= m_Wrapper.m_ResetActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_ResetActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_ResetActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_ResetActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public ResetActions @Reset => new ResetActions(this);
    public interface IResetActions
    {
        void OnReset(InputAction.CallbackContext context);
    }
}
